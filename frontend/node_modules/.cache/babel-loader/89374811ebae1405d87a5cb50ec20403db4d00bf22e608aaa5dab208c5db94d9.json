{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Q1_2025Carlos\\\\proyecto\\\\frontend\\\\src\\\\components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ChatHeader from './ChatHeader';\nimport ChatMessages from './ChatMessages';\nimport ChatInput from './ChatInput';\nimport { fetchChatbotData } from '../Apis/api';\nimport { detectUserIntent } from '../Apis/intentDetection';\nimport { getAIResponse } from '../Apis/openaiService';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [chatbotData, setChatbotData] = useState({\n    especialidades: [],\n    clinicas: [],\n    horarios: {}\n  });\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        const data = await fetchChatbotData();\n        setChatbotData(data);\n      } catch (error) {\n        console.error(\"Error al cargar datos iniciales:\", error);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // Mensaje de bienvenida\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      setMessages([{\n        id: Date.now(),\n        text: \"Â¡Hola! Soy el asistente virtual de Health Connect. Â¿En quÃ© puedo ayudarte hoy?\",\n        isBot: true\n      }]);\n    }\n  }, [isOpen, messages.length]);\n\n  // Manejar envÃ­o de mensajes\n  const handleSendMessage = async message => {\n    if (!message.trim() || isLoading) return;\n\n    // Agregar mensaje del usuario\n    const userMessage = {\n      id: Date.now(),\n      text: message,\n      isBot: false\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      // Detectar intenciÃ³n\n      const userIntent = detectUserIntent(message);\n\n      // Obtener respuesta de OpenAI\n      const botResponse = await getAIResponse(messages.map(msg => ({\n        role: msg.isBot ? 'assistant' : 'user',\n        content: msg.text\n      })), message, chatbotData, userIntent);\n\n      // Agregar respuesta del bot\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: botResponse,\n        isBot: true\n      }]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: \"Lo siento, estoy teniendo problemas para responder. Por favor, intenta de nuevo.\",\n        isBot: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Toggle chat abierto/cerrado\n  const toggleChat = () => {\n    setIsOpen(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: !isOpen ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-button\",\n      onClick: toggleChat,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\xBFNecesitas ayuda?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), \" \\uD83D\\uDCAC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        onClose: toggleChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        messages: messages,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        onSendMessage: handleSendMessage,\n        isDisabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"6NX8iO/i3OTJiGVcF69gXv4ZK2s=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","ChatHeader","ChatMessages","ChatInput","fetchChatbotData","detectUserIntent","getAIResponse","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","isLoading","setIsLoading","chatbotData","setChatbotData","especialidades","clinicas","horarios","loadInitialData","data","error","console","length","id","Date","now","text","isBot","handleSendMessage","message","trim","userMessage","prev","userIntent","botResponse","map","msg","role","content","toggleChat","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onSendMessage","isDisabled","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Q1_2025Carlos/proyecto/frontend/src/components/Chatbot/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ChatHeader from './ChatHeader';\r\nimport ChatMessages from './ChatMessages';\r\nimport ChatInput from './ChatInput';\r\nimport { fetchChatbotData } from '../Apis/api';\r\nimport { detectUserIntent } from '../Apis/intentDetection';\r\nimport { getAIResponse } from '../Apis/openaiService';\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [chatbotData, setChatbotData] = useState({\r\n    especialidades: [],\r\n    clinicas: [],\r\n    horarios: {}\r\n  });\r\n\r\n  // Cargar datos iniciales\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      try {\r\n        const data = await fetchChatbotData();\r\n        setChatbotData(data);\r\n      } catch (error) {\r\n        console.error(\"Error al cargar datos iniciales:\", error);\r\n      }\r\n    };\r\n    \r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // Mensaje de bienvenida\r\n  useEffect(() => {\r\n    if (isOpen && messages.length === 0) {\r\n      setMessages([{\r\n        id: Date.now(),\r\n        text: \"Â¡Hola! Soy el asistente virtual de Health Connect. Â¿En quÃ© puedo ayudarte hoy?\",\r\n        isBot: true\r\n      }]);\r\n    }\r\n  }, [isOpen, messages.length]);\r\n\r\n  // Manejar envÃ­o de mensajes\r\n  const handleSendMessage = async (message) => {\r\n    if (!message.trim() || isLoading) return;\r\n    \r\n    // Agregar mensaje del usuario\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: message,\r\n      isBot: false\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Detectar intenciÃ³n\r\n      const userIntent = detectUserIntent(message);\r\n      \r\n      // Obtener respuesta de OpenAI\r\n      const botResponse = await getAIResponse(\r\n        messages.map(msg => ({\r\n          role: msg.isBot ? 'assistant' : 'user',\r\n          content: msg.text\r\n        })),\r\n        message,\r\n        chatbotData,\r\n        userIntent\r\n      );\r\n      \r\n      // Agregar respuesta del bot\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: botResponse,\r\n        isBot: true\r\n      }]);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: \"Lo siento, estoy teniendo problemas para responder. Por favor, intenta de nuevo.\",\r\n        isBot: true\r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Toggle chat abierto/cerrado\r\n  const toggleChat = () => {\r\n    setIsOpen(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      {!isOpen ? (\r\n        <button className=\"chatbot-button\" onClick={toggleChat}>\r\n          <span>Â¿Necesitas ayuda?</span> ðŸ’¬\r\n        </button>\r\n      ) : (\r\n        <div className=\"chatbot-window\">\r\n          <ChatHeader onClose={toggleChat} />\r\n          <ChatMessages messages={messages} isLoading={isLoading} />\r\n          <ChatInput onSendMessage={handleSendMessage} isDisabled={isLoading} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
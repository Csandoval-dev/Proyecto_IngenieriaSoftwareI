{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Q1_2025Carlos\\\\proyecto\\\\frontend\\\\src\\\\components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/Chatbot/Chatbot.jsx\nimport React, { useState, useEffect } from 'react';\nimport ChatHeader from './ChatHeader';\nimport ChatMessages from './ChatMessages';\nimport ChatInput from './ChatInput';\nimport { fetchChatbotData } from '../../Apis/api';\nimport { detectUserIntent } from '../../Apis/intentDetection';\nimport { getAIResponse } from '../../Apis/openaiService';\nimport './Chatbot.css';\n\n/**\r\n * Componente principal del chatbot que gestiona el estado y la lógica de la conversación\r\n * Este componente sirve como contenedor para los demás componentes del chatbot\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  // Estado para controlar si el chatbot está abierto o cerrado\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Estado para almacenar los mensajes de la conversación\n  const [messages, setMessages] = useState([]);\n\n  // Estado para controlar si se está cargando una respuesta\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Estado para almacenar datos del backend relevantes para el chatbot\n  const [chatbotData, setChatbotData] = useState({\n    especialidades: [],\n    clinicas: [],\n    horarios: {}\n  });\n\n  // Efecto para animar el icono del chatbot\n  const [isWaving, setIsWaving] = useState(false);\n\n  /**\r\n   * Efecto para cargar los datos iniciales del chatbot desde el backend\r\n   * Se ejecuta solo una vez al montar el componente\r\n   */\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        const data = await fetchChatbotData();\n        setChatbotData(data);\n      } catch (error) {\n        console.error(\"Error al cargar datos iniciales:\", error);\n      }\n    };\n    loadInitialData();\n\n    // Animación periódica del icono para llamar la atención\n    const waveInterval = setInterval(() => {\n      setIsWaving(true);\n      setTimeout(() => setIsWaving(false), 1000);\n    }, 10000);\n    return () => clearInterval(waveInterval);\n  }, []);\n\n  /**\r\n   * Efecto para mostrar un mensaje de bienvenida cuando se abre el chat\r\n   * Se activa cuando cambia el estado de isOpen o se reinician los mensajes\r\n   */\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      setMessages([{\n        id: Date.now(),\n        text: \"¡Hola! Soy el asistente virtual de Health Connect. ¿En qué puedo ayudarte hoy?\",\n        isBot: true\n      }]);\n    }\n  }, [isOpen, messages.length]);\n\n  /**\r\n   * Maneja el envío de un nuevo mensaje por parte del usuario\r\n   * @param {string} message - El texto del mensaje enviado por el usuario\r\n   */\n  const handleSendMessage = async message => {\n    // Validar que el mensaje no esté vacío y no haya una respuesta en proceso\n    if (!message.trim() || isLoading) return;\n\n    // Crear objeto para el mensaje del usuario\n    const userMessage = {\n      id: Date.now(),\n      text: message,\n      isBot: false\n    };\n\n    // Agregar el mensaje del usuario a la conversación\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      // Detectar la intención del usuario basado en el mensaje\n      const userIntent = detectUserIntent(message);\n\n      // Obtener respuesta del modelo de IA\n      const botResponse = await getAIResponse(\n      // Convertir historial de mensajes al formato requerido por la API\n      messages.map(msg => ({\n        role: msg.isBot ? 'assistant' : 'user',\n        content: msg.text\n      })), message, chatbotData, userIntent);\n\n      // Agregar la respuesta del bot a la conversación\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: botResponse,\n        isBot: true\n      }]);\n    } catch (error) {\n      console.error(\"Error al procesar mensaje:\", error);\n\n      // Mostrar mensaje de error al usuario\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: \"Lo siento, estoy teniendo problemas para responder. Por favor, intenta de nuevo.\",\n        isBot: true\n      }]);\n    } finally {\n      // Finalizar estado de carga\n      setIsLoading(false);\n    }\n  };\n\n  /**\r\n   * Alterna el estado del chatbot entre abierto y cerrado\r\n   */\n  const toggleChat = () => {\n    setIsOpen(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: !isOpen ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chatbot-button ${isWaving ? 'waving' : ''}`,\n      onClick: toggleChat,\n      \"aria-label\": \"Abrir chat de asistencia\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-logo-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/assets/health-connect-bot.jpg\",\n          alt: \"Asistente Health Connect\",\n          className: \"chatbot-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\xBFNecesitas ayuda?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        onClose: toggleChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        messages: messages,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        onSendMessage: handleSendMessage,\n        isDisabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"hg6BcSumDp8WILDYObbPYphwWpI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","ChatHeader","ChatMessages","ChatInput","fetchChatbotData","detectUserIntent","getAIResponse","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","isLoading","setIsLoading","chatbotData","setChatbotData","especialidades","clinicas","horarios","isWaving","setIsWaving","loadInitialData","data","error","console","waveInterval","setInterval","setTimeout","clearInterval","length","id","Date","now","text","isBot","handleSendMessage","message","trim","userMessage","prev","userIntent","botResponse","map","msg","role","content","toggleChat","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onSendMessage","isDisabled","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Q1_2025Carlos/proyecto/frontend/src/components/Chatbot/Chatbot.jsx"],"sourcesContent":["// frontend/src/components/Chatbot/Chatbot.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport ChatHeader from './ChatHeader';\r\nimport ChatMessages from './ChatMessages';\r\nimport ChatInput from './ChatInput';\r\nimport { fetchChatbotData } from '../../Apis/api';\r\nimport { detectUserIntent } from '../../Apis/intentDetection';\r\nimport { getAIResponse } from '../../Apis/openaiService';\r\nimport './Chatbot.css';\r\n\r\n\r\n\r\n/**\r\n * Componente principal del chatbot que gestiona el estado y la lógica de la conversación\r\n * Este componente sirve como contenedor para los demás componentes del chatbot\r\n */\r\nconst Chatbot = () => {\r\n  // Estado para controlar si el chatbot está abierto o cerrado\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  \r\n  // Estado para almacenar los mensajes de la conversación\r\n  const [messages, setMessages] = useState([]);\r\n  \r\n  // Estado para controlar si se está cargando una respuesta\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  // Estado para almacenar datos del backend relevantes para el chatbot\r\n  const [chatbotData, setChatbotData] = useState({\r\n    especialidades: [],\r\n    clinicas: [],\r\n    horarios: {}\r\n  });\r\n  \r\n  // Efecto para animar el icono del chatbot\r\n  const [isWaving, setIsWaving] = useState(false);\r\n\r\n  /**\r\n   * Efecto para cargar los datos iniciales del chatbot desde el backend\r\n   * Se ejecuta solo una vez al montar el componente\r\n   */\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      try {\r\n        const data = await fetchChatbotData();\r\n        setChatbotData(data);\r\n      } catch (error) {\r\n        console.error(\"Error al cargar datos iniciales:\", error);\r\n      }\r\n    };\r\n    \r\n    loadInitialData();\r\n    \r\n    // Animación periódica del icono para llamar la atención\r\n    const waveInterval = setInterval(() => {\r\n      setIsWaving(true);\r\n      setTimeout(() => setIsWaving(false), 1000);\r\n    }, 10000);\r\n    \r\n    return () => clearInterval(waveInterval);\r\n  }, []);\r\n\r\n  /**\r\n   * Efecto para mostrar un mensaje de bienvenida cuando se abre el chat\r\n   * Se activa cuando cambia el estado de isOpen o se reinician los mensajes\r\n   */\r\n  useEffect(() => {\r\n    if (isOpen && messages.length === 0) {\r\n      setMessages([{\r\n        id: Date.now(),\r\n        text: \"¡Hola! Soy el asistente virtual de Health Connect. ¿En qué puedo ayudarte hoy?\",\r\n        isBot: true\r\n      }]);\r\n    }\r\n  }, [isOpen, messages.length]);\r\n\r\n  /**\r\n   * Maneja el envío de un nuevo mensaje por parte del usuario\r\n   * @param {string} message - El texto del mensaje enviado por el usuario\r\n   */\r\n  const handleSendMessage = async (message) => {\r\n    // Validar que el mensaje no esté vacío y no haya una respuesta en proceso\r\n    if (!message.trim() || isLoading) return;\r\n    \r\n    // Crear objeto para el mensaje del usuario\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: message,\r\n      isBot: false\r\n    };\r\n    \r\n    // Agregar el mensaje del usuario a la conversación\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Detectar la intención del usuario basado en el mensaje\r\n      const userIntent = detectUserIntent(message);\r\n      \r\n      // Obtener respuesta del modelo de IA\r\n      const botResponse = await getAIResponse(\r\n        // Convertir historial de mensajes al formato requerido por la API\r\n        messages.map(msg => ({\r\n          role: msg.isBot ? 'assistant' : 'user',\r\n          content: msg.text\r\n        })),\r\n        message,\r\n        chatbotData,\r\n        userIntent\r\n      );\r\n      \r\n      // Agregar la respuesta del bot a la conversación\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: botResponse,\r\n        isBot: true\r\n      }]);\r\n    } catch (error) {\r\n      console.error(\"Error al procesar mensaje:\", error);\r\n      \r\n      // Mostrar mensaje de error al usuario\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: \"Lo siento, estoy teniendo problemas para responder. Por favor, intenta de nuevo.\",\r\n        isBot: true\r\n      }]);\r\n    } finally {\r\n      // Finalizar estado de carga\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Alterna el estado del chatbot entre abierto y cerrado\r\n   */\r\n  const toggleChat = () => {\r\n    setIsOpen(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      {!isOpen ? (\r\n        <button \r\n          className={`chatbot-button ${isWaving ? 'waving' : ''}`} \r\n          onClick={toggleChat}\r\n          aria-label=\"Abrir chat de asistencia\"\r\n        >\r\n          {/* Logo animado del chatbot */}\r\n          <div className=\"chatbot-logo-container\">\r\n            <img \r\n              src=\"/assets/health-connect-bot.jpg\" \r\n              alt=\"Asistente Health Connect\" \r\n              className=\"chatbot-logo\" \r\n            />\r\n          </div>\r\n          <span>¿Necesitas ayuda?</span>\r\n        </button>\r\n      ) : (\r\n        <div className=\"chatbot-window\">\r\n          <ChatHeader onClose={toggleChat} />\r\n          <ChatMessages messages={messages} isLoading={isLoading} />\r\n          <ChatInput onSendMessage={handleSendMessage} isDisabled={isLoading} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
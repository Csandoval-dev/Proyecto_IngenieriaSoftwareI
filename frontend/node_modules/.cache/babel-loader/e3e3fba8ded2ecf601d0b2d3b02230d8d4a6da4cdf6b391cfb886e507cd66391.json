{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Q1_2025Carlos\\\\proyecto\\\\frontend\\\\src\\\\components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ChatHeader from './ChatHeader';\nimport ChatMessages from './ChatMessages';\nimport ChatInput from './ChatInput';\nimport { fetchChatbotData } from '../../Apis/api';\nimport { detectUserIntent } from '../../Apis/intentDetection';\n// Eliminar la importación de getAIResponse si no se usa\n// import { getAIResponse } from '../../Apis/openaiService';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  // Mantener el estado para guardar los datos incluso si no se usa directamente\n  const [chatbotData, setChatbotData] = useState({\n    especialidades: [],\n    clinicas: [],\n    horarios: {}\n  });\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        const data = await fetchChatbotData();\n        setChatbotData(data);\n      } catch (error) {\n        console.error(\"Error al cargar datos iniciales:\", error);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // Mensaje de bienvenida\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      setMessages([{\n        id: Date.now(),\n        text: \"¡Hola! Soy el asistente virtual de Health Connect. ¿En qué puedo ayudarte hoy?\",\n        isBot: true\n      }]);\n    }\n  }, [isOpen, messages.length]);\n\n  // Manejar envío de mensajes\n  const handleSendMessage = async message => {\n    if (!message.trim() || isLoading) return;\n\n    // Agregar mensaje del usuario\n    const userMessage = {\n      id: Date.now(),\n      text: message,\n      isBot: false\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      // Detectar intención\n      const userIntent = detectUserIntent(message);\n      console.log(\"Intención detectada:\", userIntent);\n\n      // Preparar los mensajes anteriores para enviar al backend\n      const messageHistory = messages.map(msg => ({\n        role: msg.isBot ? 'assistant' : 'user',\n        content: msg.text\n      }));\n\n      // Llamar al backend\n      const response = await fetch('http://localhost:5002/api/chatbot/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageHistory,\n          newMessage: message,\n          intent: userIntent\n        })\n      });\n      console.log(\"Respuesta del servidor:\", response.status);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          error: response.statusText\n        }));\n        console.error(\"Error del servidor:\", errorData);\n        throw new Error(`Error del servidor: ${errorData.error || response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Agregar respuesta del bot\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: data.message,\n        isBot: true\n      }]);\n    } catch (error) {\n      console.error(\"Error al procesar mensaje:\", error);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: \"Lo siento, estoy teniendo problemas para responder. Por favor, intenta de nuevo.\",\n        isBot: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Toggle chat abierto/cerrado\n  const toggleChat = () => {\n    setIsOpen(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: !isOpen ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-button\",\n      onClick: toggleChat,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\xBFNecesitas ayuda?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), \" \\uD83D\\uDCAC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        onClose: toggleChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        messages: messages,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        onSendMessage: handleSendMessage,\n        isDisabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"6NX8iO/i3OTJiGVcF69gXv4ZK2s=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","ChatHeader","ChatMessages","ChatInput","fetchChatbotData","detectUserIntent","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","isLoading","setIsLoading","chatbotData","setChatbotData","especialidades","clinicas","horarios","loadInitialData","data","error","console","length","id","Date","now","text","isBot","handleSendMessage","message","trim","userMessage","prev","userIntent","log","messageHistory","map","msg","role","content","response","fetch","method","headers","body","JSON","stringify","newMessage","intent","status","ok","errorData","json","catch","statusText","Error","toggleChat","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onSendMessage","isDisabled","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Q1_2025Carlos/proyecto/frontend/src/components/Chatbot/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ChatHeader from './ChatHeader';\r\nimport ChatMessages from './ChatMessages';\r\nimport ChatInput from './ChatInput';\r\nimport { fetchChatbotData } from '../../Apis/api';\r\nimport { detectUserIntent } from '../../Apis/intentDetection';\r\n// Eliminar la importación de getAIResponse si no se usa\r\n// import { getAIResponse } from '../../Apis/openaiService';\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // Mantener el estado para guardar los datos incluso si no se usa directamente\r\n  const [chatbotData, setChatbotData] = useState({\r\n    especialidades: [],\r\n    clinicas: [],\r\n    horarios: {}\r\n  });\r\n\r\n  // Cargar datos iniciales\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      try {\r\n        const data = await fetchChatbotData();\r\n        setChatbotData(data);\r\n      } catch (error) {\r\n        console.error(\"Error al cargar datos iniciales:\", error);\r\n      }\r\n    };\r\n    \r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // Mensaje de bienvenida\r\n  useEffect(() => {\r\n    if (isOpen && messages.length === 0) {\r\n      setMessages([{\r\n        id: Date.now(),\r\n        text: \"¡Hola! Soy el asistente virtual de Health Connect. ¿En qué puedo ayudarte hoy?\",\r\n        isBot: true\r\n      }]);\r\n    }\r\n  }, [isOpen, messages.length]);\r\n\r\n  // Manejar envío de mensajes\r\n  const handleSendMessage = async (message) => {\r\n    if (!message.trim() || isLoading) return;\r\n    \r\n    // Agregar mensaje del usuario\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: message,\r\n      isBot: false\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Detectar intención\r\n      const userIntent = detectUserIntent(message);\r\n      console.log(\"Intención detectada:\", userIntent);\r\n      \r\n      // Preparar los mensajes anteriores para enviar al backend\r\n      const messageHistory = messages.map(msg => ({\r\n        role: msg.isBot ? 'assistant' : 'user',\r\n        content: msg.text\r\n      }));\r\n      \r\n      // Llamar al backend\r\n      const response = await fetch('http://localhost:5002/api/chatbot/message', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          messageHistory,\r\n          newMessage: message,\r\n          intent: userIntent\r\n        })\r\n      });\r\n      \r\n      console.log(\"Respuesta del servidor:\", response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({error: response.statusText}));\r\n        console.error(\"Error del servidor:\", errorData);\r\n        throw new Error(`Error del servidor: ${errorData.error || response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Agregar respuesta del bot\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: data.message,\r\n        isBot: true\r\n      }]);\r\n    } catch (error) {\r\n      console.error(\"Error al procesar mensaje:\", error);\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: \"Lo siento, estoy teniendo problemas para responder. Por favor, intenta de nuevo.\",\r\n        isBot: true\r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Toggle chat abierto/cerrado\r\n  const toggleChat = () => {\r\n    setIsOpen(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      {!isOpen ? (\r\n        <button className=\"chatbot-button\" onClick={toggleChat}>\r\n          <span>¿Necesitas ayuda?</span> 💬\r\n        </button>\r\n      ) : (\r\n        <div className=\"chatbot-window\">\r\n          <ChatHeader onClose={toggleChat} />\r\n          <ChatMessages messages={messages} isLoading={isLoading} />\r\n          <ChatInput onSendMessage={handleSendMessage} isDisabled={isLoading} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
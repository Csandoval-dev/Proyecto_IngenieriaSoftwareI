{"ast":null,"code":"import { buildSystemPrompt } from '../utils/promptBuilder';\nexport const getAIResponse = async (messageHistory, newMessage, chatbotData, intent) => {\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n  if (!apiKey) {\n    throw new Error(\"API key no configurada\");\n  }\n\n  // Construir el prompt del sistema\n  const systemPrompt = buildSystemPrompt(chatbotData, intent);\n  const messages = [{\n    role: 'system',\n    content: systemPrompt\n  }, ...messageHistory.slice(-6), {\n    role: 'user',\n    content: newMessage\n  }];\n\n  // Realizar la llamada a la API\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${apiKey}`\n    },\n    body: JSON.stringify({\n      model: 'gpt-3.5-turbo',\n      messages,\n      temperature: 0.7,\n      max_tokens: 300\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`Error en la API: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return data.choices[0].message.content;\n};","map":{"version":3,"names":["buildSystemPrompt","getAIResponse","messageHistory","newMessage","chatbotData","intent","apiKey","process","env","REACT_APP_OPENAI_API_KEY","Error","systemPrompt","messages","role","content","slice","response","fetch","method","headers","body","JSON","stringify","model","temperature","max_tokens","ok","statusText","data","json","choices","message"],"sources":["C:/Users/User/Desktop/Q1_2025Carlos/proyecto/frontend/src/Apis/openaiService.js"],"sourcesContent":["import { buildSystemPrompt } from '../utils/promptBuilder';\r\n\r\nexport const getAIResponse = async (messageHistory, newMessage, chatbotData, intent) => {\r\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n  if (!apiKey) {\r\n    throw new Error(\"API key no configurada\");\r\n  }\r\n\r\n  // Construir el prompt del sistema\r\n  const systemPrompt = buildSystemPrompt(chatbotData, intent);\r\n  \r\n  const messages = [\r\n    { role: 'system', content: systemPrompt },\r\n    ...messageHistory.slice(-6), \r\n    { role: 'user', content: newMessage }\r\n  ];\r\n\r\n  // Realizar la llamada a la API\r\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${apiKey}`\r\n    },\r\n    body: JSON.stringify({\r\n      model: 'gpt-3.5-turbo',\r\n      messages,\r\n      temperature: 0.7,\r\n      max_tokens: 300\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Error en la API: ${response.statusText}`);\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data.choices[0].message.content;\r\n};"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,wBAAwB;AAE1D,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,MAAM,KAAK;EACtF,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EACnD,IAAI,CAACH,MAAM,EAAE;IACX,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;EAC3C;;EAEA;EACA,MAAMC,YAAY,GAAGX,iBAAiB,CAACI,WAAW,EAAEC,MAAM,CAAC;EAE3D,MAAMO,QAAQ,GAAG,CACf;IAAEC,IAAI,EAAE,QAAQ;IAAEC,OAAO,EAAEH;EAAa,CAAC,EACzC,GAAGT,cAAc,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC,EAC3B;IAAEF,IAAI,EAAE,MAAM;IAAEC,OAAO,EAAEX;EAAW,CAAC,CACtC;;EAED;EACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;IACzEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUb,MAAM;IACnC,CAAC;IACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAE,eAAe;MACtBX,QAAQ;MACRY,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC,CAAC;EAEF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;IAChB,MAAM,IAAIhB,KAAK,CAAC,oBAAoBM,QAAQ,CAACW,UAAU,EAAE,CAAC;EAC5D;EAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACjB,OAAO;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}